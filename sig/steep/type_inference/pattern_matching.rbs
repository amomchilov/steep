use Steep::TypeConstruction::Pair, Parser::AST::Node

module Steep
  module TypeInference
    class PatternMatching
      class Clause
        # The result given to the pattern matching body
        attr_reader truthy_result: LogicTypeInterpreter::Result

        # The result the pattern doesn't match
        attr_reader falsy_result: LogicTypeInterpreter::Result

        attr_reader body_pair: Pair

        def initialize: (LogicTypeInterpreter::Result truthy_result, LogicTypeInterpreter::Result falsy_result, Pair body_pair) -> void
      end

      # Initial state, after evaluating the matching expression
      attr_reader initial_result: Pair

      attr_reader node: Node

      attr_reader clauses: Array[Clause]

      attr_reader logic: LogicTypeInterpreter

      @else_clause_result: Pair?

      def initialize: (node: Node, initial_result: Pair, logic: LogicTypeInterpreter) -> void

      # Add a pattern to the pattern matching
      #
      # The *truthy* type environment is given to the block.
      # The block type checks the body of the clause, and returns the result Pair object.
      #
      # The method returns the obtained `Pair` object.
      #
      def match_clause: (Node pattern_node) { (TypeEnv) -> Pair } -> Pair

      # Add `else` clause to the pattern matching
      #
      # It yields a type environment for the body of the else clause.
      # The block type checks the body of the else node, and returns the result Pair object.
      #
      def else_clause: () { (TypeEnv) -> Pair } -> Pair

      def last_result: () -> LogicTypeInterpreter::Result

      # The result of the pattern matching
      def result: () -> Pair

      def transform_condition_node: (Node, Symbol) -> [Node, Node]

      def propagate_type_env: (Symbol, Node, TypeEnv) -> TypeEnv
    end
  end
end
