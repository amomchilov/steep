module Steep
  module Server
    class TypeCheckRequest
      attr_reader guid: String

      attr_reader work_done_progress: WorkDoneProgress

      attr_reader library_paths: Set[Pathname]

      attr_reader signature_paths: Set[Pathname]

      attr_reader code_paths: Set[Pathname]

      attr_reader priority_paths: Set[Pathname]

      attr_reader checked_paths: Set[Pathname]

      attr_reader started_at: Time

      # `true` to send a response to the client
      #
      # Defaults to `false`.
      #
      attr_accessor needs_response: bool

      def initialize: (guid: String, progress: WorkDoneProgress) -> void

      def uri: (Pathname path) -> URI::File

      type json = { guid: String, library_uris: Array[String], signature_uris: Array[String], code_uris: Array[String], priority_uris: Array[String] }

      def as_json: (assignment: Services::PathAssignment) -> json

      def total: () -> Integer

      def percentage: () -> Integer

      def all_paths: () -> Set[Pathname]

      def checking_path?: (Pathname path) -> bool

      def checked: (Pathname path) -> void

      def finished?: () -> bool

      def unchecked_paths: () -> Set[Pathname]

      def unchecked_code_paths: () -> Set[Pathname]

      def unchecked_library_paths: () -> Set[Pathname]

      def unchecked_signature_paths: () -> Set[Pathname]
    end

    # TypeCheckController remembers changed files, keep track of open editors, and make a TypeCheckRequest that contains list of all files to be type checked
    #
    # ```rb
    # controller = TypeCheckController.new(project: project)
    #
    # controller.push_changes(file_path)           # Remember that the path is changed
    # controller.update_priority(open: file_path)  # Remember that an editor opens the path
    # controller.make_request(...)                 # Make an instance of TypeCheckRequest that contains list of all paths to type check
    # ```
    #
    class TypeCheckController
      attr_reader project: Project

      attr_reader priority_paths: Set[Pathname]

      attr_reader changed_paths: Set[Pathname]

      attr_reader target_paths: Array[TargetPaths]

      # TargetPaths object keeps track of the expanded absolute paths of each target
      #
      # 1. *Library path* is a RBS file that is loaded as a part of a library
      # 2. *Signature path* is a RBS file that is loaded as a part of the application library
      # 3. *Code path* is a Ruby file that is being type checked
      #
      class TargetPaths
        attr_reader project: Project

        attr_reader target: Project::Target

        # Set of absolute paths of Ruby code
        #
        attr_reader code_paths: Set[Pathname]

        # Set of absolute paths of app signatures
        #
        attr_reader signature_paths: Set[Pathname]

        # Set of absolute paths of library signatures
        #
        # Unlike `code_paths` and `signature_paths`, the `library_paths` must be added explicitly not by `#add` method.
        #
        attr_reader library_paths: Set[Pathname]

        def initialize: (project: Project, target: Project::Target) -> void

        def all_paths: () -> Set[Pathname]

        def library_path?: (Pathname path) -> bool

        def signature_path?: (Pathname path) -> bool

        def code_path?: (Pathname path) -> bool

        # Adds `path` to the object
        #
        # Returns `false` if the path is not a part of the project.
        #
        # Whether `path` is a code path or signature path is automatically detected.
        # `library: true` is required to add the path to library path.
        #
        def add: (Pathname path, ?library: bool) -> bool

        alias << add
      end

      def initialize: (project: Project) -> void

      def load: (command_line_args: Array[String]) { (Hash[String, ChangeBuffer::content]) -> void } -> void

      def push_changes: (Pathname path) -> void

      def update_priority: (open: Pathname) -> void
                         | (close: Pathname) -> void

      # Returns a TypeCheckRequest that contains all paths to be type checked
      #
      # This method also resets the controller status by removing everything from `changed_paths`.
      #
      # * If `last_request:` is given, the remaining paths are also included in the new request.
      # * If `include_unchanged` is `true`, all paths are included in the new request.
      # * `progress:` is a `WorkDoneProgress` object to report the progress of the type checking.
      #
      # Returns `nil` when no type checking is needed.
      #
      def make_request: (?guid: String, ?last_request: TypeCheckRequest?, ?include_unchanged: bool, progress: WorkDoneProgress) -> TypeCheckRequest?
    end
  end
end
