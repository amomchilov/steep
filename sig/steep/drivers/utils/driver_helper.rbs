use LanguageServer::Protocol::Transport::Io::*

module Steep
  module Drivers
    module Utils
      module DriverHelper
        attr_accessor steepfile: Pathname?

        # `true` to install rbs collection automatically
        attr_accessor disable_install_collection: bool

        def load_config: (?path: Pathname) -> Project

        def install_collection: (Project::Target, Pathname config_path) -> void

        def request_id: () -> String

        # Wait for response to a request with `id` read from `reader`
        #
        # If `unknown_responses` is given, it does something regarding to the option.
        # If `unknown_responses` is not given and block is given, it yields the message.
        #
        # If neither `unknown_responses` nor block is given, it simply ignores the unknown message.
        #
        def wait_for_response_id: (reader: Reader, id: String, unknown_responses: unknown_message_action) -> untyped
                                | (reader: Reader, id: String) ?{ (untyped message) -> void } -> untyped

        def shutdown_exit: (writer: Writer, reader: Reader) -> void

        type unknown_message_action = :ignore | :log | :raise

        def wait_for_message: (reader: Reader, ?unknown_messages: unknown_message_action) { (untyped) -> bool } -> untyped

        def keep_diagnostic?: (untyped diagnostic, severity_level: Diagnostic::LSPFormatter::severity) -> bool

        DEFAULT_CLI_LSP_INITIALIZE_PARAMS: Hash[Symbol, untyped]
      end
    end
  end
end
