module Steep
  module Subtyping
    # VariableVariance calculates the variance of type variables
    #
    # ```ruby
    # variance = VariableVariance.new(env).add_type(type)
    #
    # variance.covariant?(:T)
    # variance.contravariant?(:T)
    # variance.invariant?(:T)
    # variance.unused?(:T)
    # ```
    # 
    class VariableVariance
      type variance = :covariant | :contravariant | :invariant

      attr_reader covariants: Set[Symbol]

      attr_reader contravariants: Set[Symbol]

      attr_reader env: RBS::Environment

      def initialize: (RBS::Environment) -> void

      def covariant?: (Symbol var) -> bool

      def contravariant?: (Symbol var) -> bool

      def invariant?: (Symbol var) -> bool

      def unused?: (Symbol var) -> bool

      # Add variance included in the type
      #
      # Generics arguments are detected based on it's definition
      #
      def add_type: (AST::Types::t) -> VariableVariance

      # Add variance of type variables in method_type
      #
      # Ignores the variable bounding -- bound variables are treated as *free* variables
      #
      def add_method_type: (Interface::MethodType method_type) -> VariableVariance

      private

      def self.insert_params: (Interface::Function::Params params, block: bool, covariants: Set[Symbol], contravariants: Set[Symbol]) -> void

      # Add type variables from `type`, which is located in `variance` position
      #
      def insert_type: (AST::Types::t, variance) -> void

      def flip: (variance) -> variance
    end
  end
end
